# top-most EditorConfig file
root = true

[*]
end_of_line = crlf
insert_final_newline = true
indent_style = space
indent_size = 4
dotnet_style_operator_placement_when_wrapping = beginning_of_line
tab_width = 4
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion
dotnet_style_namespace_match_folder = true:suggestion
dotnet_style_readonly_field = true:warning
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning
dotnet_style_allow_multiple_blank_lines_experimental = true:silent
dotnet_style_allow_statement_immediately_after_block_experimental = true:silent
dotnet_code_quality_unused_parameters = all:suggestion
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_property = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_event = false:warning

[*.cs]
dotnet_diagnostic.IDE0073.severity = warning
# file_header_template = Licensed under the MIT License.
#######################################################################################
#                             C# code style settings                                  #
#######################################################################################

# Sort using and Import directives with System.* appearing first
# Note, to apply using-related settings you have to run "Remove and Sort using" command from the context menu in VS. Formatting a document will not trigger change the usings block.
dotnet_sort_system_directives_first                                 = true
dotnet_separate_import_directive_groups                             = false

dotnet_style_readonly_field                                         = true: warning

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field                                = false : warning
dotnet_style_qualification_for_property                             = false : warning
dotnet_style_qualification_for_method                               = false : warning
dotnet_style_qualification_for_event                                = false : warning

# Use language keywords instead of framework type names for type references: i.e. prefer 'int' over 'Int32'
dotnet_style_predefined_type_for_locals_parameters_members          = true : warning
# Prefer `int.MaxValue` over `Int32.MaxValue`
dotnet_style_predefined_type_for_member_access                      = true : warning

# Prefer `private const string foo` over `const string foo`
dotnet_style_require_accessibility_modifiers                        = for_non_interface_members : warning
# Prefer modifier order
csharp_preferred_modifier_order                                     = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Suggest more modern language features when available

# Prefer object initializers (e.g. `new Foo() { Bar = 42 };`) over property assignment (e.g. `var f = new Foo(); f.Bar = 42;`)
dotnet_style_object_initializer                                     = true : suggestion
# Prefer collection initializers (e.g. new List<int>{1,2,3})
dotnet_style_collection_initializer                                 = true : suggestion
# Prefer null coalescing (e.g. `x ?? y`) over ternary null checking (e.g. `x != null ? x:y`)
dotnet_style_coalesce_expression                                    = true : suggestion
# Prefer null propagation (e.g. `x?.Foo`) over ternary null checking (e.g. `x != null ? x.Foo:null`)
dotnet_style_null_propagation                                       = true : suggestion
# Prefer tuple names over ItemN properties
dotnet_style_explicit_tuple_names                                   = true : suggestion

# Prefer inferred anonymous type member names (e.g. `var anon = new { age, name };`)
dotnet_style_prefer_inferred_anonymous_type_member_names            = true : suggestion

# Prefer `var` type in declarations for built-in system types like `int`
csharp_style_var_for_built_in_types                                 = false:silent
# Prefer `var` type in declarations when the type is explicitly mentioned on the RHS (e.g. `var customer = new Customer();`)
csharp_style_var_when_type_is_apparent                              = true:suggestion
# Prefer `var` type in declarations in all other cases
csharp_style_var_elsewhere                                          = false:silent

# Prefer expression-bodied members for methods when they will be a single line (e.g. `public int GetAge() => this.Age;`)
csharp_style_expression_bodied_methods                              = when_on_single_line:suggestion
# Prefer expression-bodied members for constructors when they will be a single line (e.g. `public int GetAge() => this.Age;`)
csharp_style_expression_bodied_constructors                         = when_on_single_line:suggestion
# Prefer expression-bodied members for operators when they will be a single line (e.g. `public int GetAge() => this.Age;`)
csharp_style_expression_bodied_operators                            = when_on_single_line:suggestion
# Prefer expression-bodied members for properties when they will be a single line (e.g. `public int GetAge() => this.Age;`)
csharp_style_expression_bodied_properties                           = true:suggestion
# Prefer expression-bodied members for indexers when they will be a single line (e.g. `public int GetAge() => this.Age;`)
csharp_style_expression_bodied_indexers                             = true:suggestion
# Prefer expression-bodied members for accessors when they will be a single line (e.g. `public int GetAge() => this.Age;`)
csharp_style_expression_bodied_accessors                            = true:suggestion

# Prefer pattern matching instead of `is` expressions with type casts
csharp_style_pattern_matching_over_is_with_cast_check               = true:suggestion
# Prefer pattern matching instead of `as` expressions with null checks to determine if something is of a particular type
csharp_style_pattern_matching_over_as_with_null_check               = true:suggestion
# Prefer `out` variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration                           = true:suggestion

# Prefer `default` over `default(T)`
csharp_prefer_simple_default_expression                             = true:suggestion

# Prefer deconstructed variable declaration
csharp_style_deconstructed_variable_declaration                     = true:suggestion

# Prefer local functions over anonymous functions
csharp_style_pattern_local_over_anonymous_function                  = true : suggestion

# TODO: Change to suggestion after switching to C# 7.2
# Prefer to use `throw` expressions instead of `throw` statements
csharp_style_throw_expression                                       = false:suggestion

# Prefer MyEvent?.Invoke(); over `var d = MyEvnet; if (d != null) {d();}`
csharp_style_conditional_delegate_call                              = true:warning

# Prefer curly braces even for one line of code
csharp_prefer_braces                                                = true:warning

# Prefer foo[42] = 1; over foo[ 42 ] = 1;
csharp_space_between_square_brackets                                = false : warning

# Do not prefer if (x) DoSomething()
csharp_preserve_single_line_statements                              = false : warning
# Prefer { DoSomething(); }
csharp_preserve_single_line_blocks                                  = true : suggestion

# Prefer var foo = new[] {1, 2, 3} over new[] {1,2,3};
csharp_space_after_comma                                            = true : suggestion

#######################################################################################
#                                   Formatting                                        #
#######################################################################################
csharp_new_line_before_open_brace                                   = all
csharp_new_line_before_else                                         = true
csharp_new_line_before_catch                                        = true
csharp_new_line_before_finally                                      = true
csharp_new_line_before_members_in_object_initializers               = true
csharp_new_line_before_members_in_anonymous_types                   = true
csharp_new_line_between_query_expression_clauses                    = true
csharp_indent_case_contents                                         = true
csharp_indent_switch_labels                                         = true
csharp_indent_labels                                                = one_less_than_current
csharp_space_after_cast                                             = false
csharp_space_after_keywords_in_control_flow_statements              = true
csharp_space_between_method_declaration_parameter_list_parentheses  = false
csharp_space_between_method_call_parameter_list_parentheses         = false

csharp_indent_block_contents                                        = true
csharp_indent_braces                                                = false
csharp_indent_case_contents_when_block                              = false

csharp_blank_lines_after_using_list                                 = 1
csharp_blank_lines_inside_namespace                                 = 0
csharp_blank_lines_after_file_scoped_namespace_directive            = 1
csharp_blank_lines_inside_type                                      = 1
csharp_remove_blank_lines_near_braces_in_code                       = true

#######################################################################################
#                               Naming Conventions                                    #
#######################################################################################

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols      = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds                = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities      = public, protected, internal, protected internal, private protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers              = static

dotnet_naming_style.non_private_static_field_style.capitalization               = pascal_case

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = warning
dotnet_naming_rule.constants_should_be_pascal_case.symbols                      = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.constants.applicable_kinds                                = field, local
dotnet_naming_symbols.constants.required_modifiers                              = const

dotnet_naming_style.constant_style.capitalization                               = pascal_case

# Static fields are camelCase and start with s_
dotnet_naming_rule.static_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.static_fields_should_be_camel_case.symbols                   = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = non_private_static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds                            = field
dotnet_naming_symbols.static_fields.required_modifiers                          = static
# The rule should be enforced only for private fields
dotnet_naming_symbols.static_fields.applicable_accessibilities                  = private

dotnet_naming_style.static_field_style.capitalization                           = pascal_case

# We don't configure the naming convention for 'async' methods, because it's not possible to enforce the naming
# convention for task-based methods not marked with the 'async' prefix (like interface members or simplie `Task FooBar() => Baz()`).
# Instead 'Microsoft.VisualStudio.Threading.Analyzers' (or simpler) analyzers should be used to enforce it.

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols                 = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds                          = field
# The rule should be enforced only for private fields
dotnet_naming_symbols.instance_fields.applicable_accessibilities                = private

dotnet_naming_style.instance_field_style.capitalization                         = camel_case
dotnet_naming_style.instance_field_style.required_prefix                        = _

# Locals, parameters and local functions are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = warning
dotnet_naming_rule.locals_should_be_camel_case.symbols                          = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds                    = parameter, local, local_function

dotnet_naming_style.camel_case_style.capitalization                             = camel_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = warning
dotnet_naming_rule.members_should_be_pascal_case.symbols                        = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.all_members.applicable_kinds                              = *

dotnet_naming_style.pascal_case_style.capitalization                            = pascal_case

# FXCop Roslyn-Based analyzers
# CA1063: Implement IDisposable Correctly - for pure managed objects use of the Dispose(bool) pattern is unneeded.
dotnet_diagnostic.CA1063.severity = none

# CA2237: Mark ISerializable types with serializable
dotnet_diagnostic.CA2237.severity = none

# CA2217: Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = none

# RA009: Do not use fluent API for preconditions/assertions to avoid runtime overhead.
dotnet_diagnostic.RA009.severity = warning
csharp_using_directive_placement = outside_namespace:silent
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_namespace_declarations = file_scoped:silent
csharp_style_prefer_method_group_conversion = true:suggestion
csharp_style_prefer_top_level_statements = true:suggestion
csharp_style_prefer_primary_constructors = true:suggestion
csharp_prefer_system_threading_lock = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = true:suggestion
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_space_around_binary_operators = before_and_after
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_implicitly_typed_lambda_expression = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_unbound_generic_type_in_nameof = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion
csharp_prefer_static_local_function = true:suggestion
csharp_prefer_static_anonymous_function = true:suggestion
csharp_style_prefer_readonly_struct = true:suggestion
csharp_style_prefer_readonly_struct_member = true:suggestion
csharp_style_allow_embedded_statements_on_same_line_experimental = true:silent
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:silent
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion
